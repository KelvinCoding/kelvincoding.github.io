---
layout: post
title: "Iteration"
date: 2016-01-31T23:00:00-06:00
---

This week our team deployed several projects, though not without headaches. Learning how to write better code so less problems arise later; creating better test cases in the beginning and end; learning to take things into my own hand even if they're wrong. All of the things that I have been doing and evolving even before this new position. At the beginning of this position I was excited to learn something new. From the large corporate style of creating, running, deploying, selling, etc. a product to the big picture on where it all fits in to the company and the impact to the world. As time moved on, I became tired of those ideals due to their lack of inspiration. The work was something a company needed have a smoother, simpler, process with their clients/customers, but it gave me no other reason to do it other than it was my job that I was paid to do. That is the point of a job to do something, even if you do not want to, because you were contractually obliged for your services. Going through the motions every day was more zombie-like and exhausting than most things I have ever done previously, I did not feel like I was developing something, I felt like I was putting bricks its pre-designated spot. I wanted the joys and challenges that new project should have, trying to solve the problems in new creative ways or the a similar way that was done previously.

Then this week happened. I worked my ass off to get one of these projects into production day in and day out. It was exciting to work on something that was breaking and needed to be fixed in a relatively quick manner. The ideas on how to handle the issue, the trials and errors on testing the ideas, and finally deciding that the idea was stable and good enough all within an hour. From there I learned what was important to me on the work I deal with. One of them was the quick-feet problem identification; where was the issue and how did it happen? With that, we have to forego similar thoughts of, "Oh it couldn't be *my* part." and "Of course it was *his* part that messed the whole thing up." Who would actually care about who made the problem? We only care about who *solved* it. On that, the next value, coming up with multiple ways of solving the problem. Let's face it, we all think *"I did it this way, thinking it would work! Why didn't it work?"* so we circle around the same idea trying to perfect it and maybe, it wasn't the right idea in the first place, or maybe it was. Looking at it in different ways, trying to find another solution that our small heads, allows us to find other scenarios where it *could* also fail again, evolving our potential solution even further. Testing is by far the most important value taken from all of this. In my previous post, I stated that I *hated* failing, creating test cases and scenarios that would be commonly experienced gives us the ability to lessen those failures. If we found another solution, did it pass our previous test cases? With the new problem, we also need to create a new test case and see if our solution solves that problem. The greatest part about all of this, is its iterativeness. In the software-development world we call this **Test Driven Development**, but why stop in the software world? Implementing this ideal in normal life, while difficult, would make our day-to-day lives a little simpler.

Of course there are limitations in implementing this idea into our lives, but it doesn't mean we shouldn't do it. We need to take parts of this ideal and see where we can fit it into our daily lives. What are the recurring problems that we have failed to solve? Is there a way for us to solve it, even if it takes more time and effort? If we don't start sooner to handle the issues that arise is our lives, we will become complacent. Going through the motions again, foregoing all the things that truly makes us excited. Change.
